{
    "sources": {
      "web_application": {
        "event_format": {
          "attributes": {
            "http.method": "string",
            "http.target": "string",
            "http.scheme": "string",
            "http.status_code": "integer",
            "http.route": "string",
            "http.duration_ms": "integer",
            "service.health.status": "string",
            "service.health.dependencies": "array"
          }
        },
        "allowed_values": {
          "http.method": ["GET", "POST", "PUT", "DELETE"],
          "http.target": ["/api/health", "/api/products/recommendations", "/api/orders"],
          "http.scheme": ["http", "https"],
          "http.status_code": [200, 201, 400, 403, 404, 500],
          "http.route": ["/api/health", "/api/products/recommendations", "/api/orders"],
          "service.health.status": ["up", "down"],
          "service.health.dependencies": ["database", "cache", "auth-service"]
        },
        "event_types": {
          "health_check": {
            "description": "Check the health of the service",
            "followed_by": ["process_payment", "fetch_user_data"]
          },
          "order_creation": {
            "description": "Create a new order",
            "followed_by": ["execute_query"]
          },
          "fetch_user_data": {
            "description": "Fetch user data",
            "followed_by": ["health_check"]
          }
        }
      },
      "api_service": {
        "event_format": {
          "attributes": {
            "http.method": "string",
            "http.target": "string",
            "http.scheme": "string",
            "http.status_code": "integer",
            "error.type": "string",
            "error.message": "string"
          }
        },
        "allowed_values": {
          "http.method": ["GET", "POST", "PUT", "DELETE"],
          "http.target": ["/api/payments/process", "/api/users/preferences"],
          "http.scheme": ["http", "https"],
          "http.status_code": [200, 400, 404, 500],
          "error.type": ["payment_processing_failed", "authorization_failed"],
          "error.message": ["Third-party payment gateway timeout", "Token expired"]
        },
        "event_types": {
          "process_payment": {
            "description": "Process a payment",
            "followed_by": ["execute_query"]
          },
          "fetch_user_data": {
            "description": "Fetch user data",
            "followed_by": ["health_check"]
          },
          "execute_query": {
            "description": "Execute a database query",
            "followed_by": ["process_payment"]
          },
          "health_check": {
            "description": "Check the health of the API service",
            "followed_by": []
          }
        }
      },
      "database_service": {
        "event_format": {
          "attributes": {
            "db.operation": "string",
            "db.statement.type": "string",
            "db.name": "string",
            "db.user": "string",
            "db.connection.id": "string",
            "db.rows_affected": "integer",
            "db.execution_time_ms": "integer",
            "db.error.code": "string",
            "db.transaction.id": "string",
            "db.table": "string",
            "db.lock.type": "string",
            "db.postgresql.plan_type": "string",
            "db.postgresql.checkpoint_type": "string"
          }
        },
        "allowed_values": {
          "db.operation": ["QUERY", "TRANSACTION", "MAINTENANCE", "REPLICATION"],
          "db.statement.type": ["SELECT", "INSERT", "UPDATE", "DELETE"],
          "db.name": ["inventory_db", "user_db"],
          "db.user": ["inventory_api_user", "admin_user"],
          "db.connection.id": ["12345", "54321", "67890", "13579", "24680"],
          "db.error.code": ["40P01", "23505"],
          "db.transaction.id": ["xact_789012", "xact_123456"],
          "db.table": ["product_stock", "orders"],
          "db.lock.type": ["RowExclusiveLock", "RowShareLock"],
          "db.postgresql.plan_type": ["index_scan", "sequential_scan"],
          "db.postgresql.checkpoint_type": ["scheduled", "manual"]
        },
        "event_types": {
          "execute_query": {
            "description": "Execute a database query",
            "followed_by": ["process_payment"]
          },
          "update_stock": {
            "description": "Update stock information",
            "followed_by": ["health_check"]
          },
          "health_check": {
            "description": "Check the health of the database service",
            "followed_by": []
          },
          "process_payment": {
            "description": "Process a payment related to database operations",
            "followed_by": []
          }
        }
      }
    }
  }
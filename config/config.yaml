---
# Core Configuration
start_time: "2024-11-01T00:00:00Z"
end_time: "2025-01-01T00:00:00Z"

# Global Settings
correlation:
  enabled: true
  id_field: "req_id"
  propagation:
    headers: ["X-Request-ID", "X-Correlation-ID"]
    databases: true
    logs: true

response_time:
  min: 100
  max: 5000
  degradation:
    high_traffic_multiplier: 1.5
    error_multiplier: 2.0
    cache_miss_multiplier: 1.3

# Acceptable Values Reference
acceptable_values:
  method: ['GET', 'POST', 'PUT', 'DELETE']
  path: [
    '/api/v1/users',
    '/api/v1/orders',
    '/api/v1/products',
    '/api/v1/cart',
    '/api/v1/wishlist',
    '/api/v1/deals',
    '/api/v1/gift-cards',
    '/health',
    '/metrics'
  ]
  protocol: ['HTTP/1.1', 'HTTP/2.0']
  status: [200, 201, 400, 401, 403, 404, 500]
  user_agent:
    - >-
      Mozilla/5.0 (Windows NT 10.0; Win64; x64)
      AppleWebKit/537.36
    - >-
      Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)
      AppleWebKit/537.36
    - >-
      Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)
      AppleWebKit/605.1.15
  referer: ['-', 'https://example.com', 'https://google.com']
  level: ['INFO', 'WARNING', 'ERROR', 'DEBUG']
  service:
    - auth-service
    - payment-service
    - inventory-service
    - user-service
  operation: ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'JOIN']
  table: ['users', 'orders', 'products', 'categories', 'payments']
sources:
  web_server:
    description: "Apache HTTP Server 2.4.62"
    timestamp_format: >
      "[%d/%b/%Y:%H:%M:%S.%f %z]"  # 30/Dec/2024:09:23:51.182 +0000
    attributes:
      method:
        type: "choice"
        values: ['GET', 'POST', 'PUT', 'DELETE']
      path:
        type: "choice"
        values: [
          '/api/v1/users',
          '/api/v1/orders',
          '/api/v1/products',
          '/api/v1/cart',
          '/api/v1/wishlist',
          '/api/v1/deals',
          '/api/v1/gift-cards',
          '/health',
          '/metrics'
        ]
      protocol:
        type: "choice"
        values: ['HTTP/1.1', 'HTTP/2.0']
      status:
        type: "choice"
        values: [200, 201, 400, 401, 403, 404, 500]
      bytes:
        type: "integer"
        min: 500
        max: 5000
      client_ip:
        type: "string"
        generator: "client_ip"
      req_id:
        type: "string"
        generator: "request_id"
      user_agent:
        type: "choice"
        values:
          - >
            Mozilla/5.0 (Windows NT 10.0; Win64; x64)
            AppleWebKit/537.36
          - >
            Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)
            AppleWebKit/537.36
          - >
            Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)
            AppleWebKit/605.1.15
      referer:
        type: "choice"
        values: ['-', 'https://example.com', 'https://google.com']
      response_time:
        type: "integer"
        min: 100
        max: 5000
    event_types:
      - type: "access_log"
        format: "{client_ip} - - {timestamp} \"{method} {path} {protocol}\" {status} {bytes} \"{referer}\" \"{user_agent}\" {response_time}ms {req_id}"
        create_from_scratch: true
      - type: "error_log"
        format: "{timestamp} [error] {client_ip} {req_id} \"{method} {path}\" {status} - {message}"
        create_from_scratch: true
    user_behavior:
      geographic_distribution:
        US: 0.4
        EU: 0.3
        ASIA: 0.2
        OTHER: 0.1

      session_patterns:
        duration:
          min: 300    # 5 minutes
          max: 3600   # 1 hour
        requests_per_session:
          min: 5
          max: 50

      device_correlations:
        mobile:
          paths: ['/api/v1/cart', '/api/v1/wishlist']
          peak_hours: [12, 13, 17, 18, 19, 20]
          response_time_multiplier: 1.2
        desktop:
          paths: ['/api/v1/products', '/api/v1/orders']
          peak_hours: [9, 10, 11, 14, 15, 16]
          response_time_multiplier: 1.0

      error_patterns:
        rate: 0.05    # 5% base error rate
        conditions:
          high_traffic:
            threshold: 1000  # requests per minute
            multiplier: 2.0  # doubles error rate
          mobile_heavy:
            threshold: 0.6   # 60% mobile traffic
            multiplier: 1.5  # increases error rate by 50%

      cache_behavior:
        hit_rate: 0.75      # 75% cache hit rate
        ttl:
          min: 300         # 5 minutes
          max: 86400      # 24 hours
        invalidation_rate: 0.01  # 1% of requests trigger cache invalidation
  application_server:
    description: "Spring Boot Application Server"
    timestamp_format: "%Y-%m-%d %H:%M:%S.%f"  # 2024-12-30 09:23:51.182
    attributes:
      level:
        type: "choice"
        values: ['INFO', 'WARNING', 'ERROR', 'DEBUG']
      service:
        type: "choice"
        values:
          - 'auth-service'
          - 'payment-service'
          - 'inventory-service'
          - 'user-service'
      message:
        type: "template"
        templates: [
          "Processing request for {service}",
          "Request completed in {response_time}ms",
          "Database query executed in {db_time}ms",
          "Cache {hit_miss} for key {cache_key}",
          "Error occurred: {error_message}"
        ]
      req_id:
        type: "string"
        generator: "request_id"
      thread_id:
        type: "string"
        generator: "thread_id"
    event_types:
      - type: "application_log"
        format: "{timestamp} {level} [{service}] {thread_id} {req_id} - {message}"
        create_from_scratch: true
      - type: "service_metric"
        format: "{timestamp} METRIC [{service}] {metric_name}={metric_value}"
        create_from_scratch: true
    service_dependencies:
      auth_service:
        dependencies: ['user-service']
        response_time:
          min: 50
          max: 200
        error_rate: 0.02

      payment_service:
        dependencies: ['auth-service', 'inventory-service']
        response_time:
          min: 100
          max: 500
        error_rate: 0.03

      inventory_service:
        dependencies: ['auth-service']
        response_time:
          min: 75
          max: 300
        error_rate: 0.02

      user_service:
        dependencies: []
        response_time:
          min: 50
          max: 200
        error_rate: 0.01

    database_interactions:
      query_patterns:
        read_heavy_services: ['inventory-service', 'user-service']
        write_heavy_services: ['payment-service', 'auth-service']
        operation_distribution:
          SELECT: 0.7
          INSERT: 0.1
          UPDATE: 0.15
          DELETE: 0.05

      performance_metrics:
        query_time:
          min: 5
          max: 100
          degradation_factor: 1.5  # Applied during high load
        connection_pool:
          min_idle: 5
          max_active: 20
          checkout_timeout: 5000

      table_patterns:
        users:
          operations: ['SELECT', 'UPDATE']
          frequency: 0.3
        orders:
          operations: ['INSERT', 'SELECT', 'UPDATE']
          frequency: 0.25
        products:
          operations: ['SELECT']
          frequency: 0.25
        payments:
          operations: ['INSERT', 'SELECT']
          frequency: 0.2

      error_scenarios:
        deadlock:
          probability: 0.001
          affected_tables: ['orders', 'payments']
          retry_count: 3
        connection_timeout:
          probability: 0.005
          recovery_time: 5000
        query_timeout:
          probability: 0.01
          threshold: 10000
    monitoring_metrics:
      system_metrics:
        cpu:
          warning_threshold: 70  # percentage
          critical_threshold: 85
          collection_interval: 60  # seconds

        memory:
          warning_threshold: 75  # percentage
          critical_threshold: 90
          collection_interval: 60

        disk:
          warning_threshold: 80  # percentage
          critical_threshold: 90
          collection_interval: 300

        network:
          bandwidth_threshold: 100000000  # bytes/sec
          connection_threshold: 5000      # concurrent connections
          collection_interval: 30

      business_kpis:
        orders:
          success_rate:
            target: 0.98
            warning_threshold: 0.95
          average_value:
            target: 100
            warning_threshold: 80
          completion_time:
            target: 2000  # milliseconds
            warning_threshold: 3000

        user_sessions:
          conversion_rate:
            target: 0.15
            warning_threshold: 0.10
          bounce_rate:
            target: 0.30
            warning_threshold: 0.40
          average_duration:
            target: 600  # seconds
            warning_threshold: 300

      alerting_thresholds:
        error_rate:
          warning: 0.05    # 5% error rate
          critical: 0.10   # 10% error rate
          window: 300      # 5 minutes

        response_time:
          warning: 2000    # milliseconds
          critical: 5000
          percentile: 95   # 95th percentile

        availability:
          warning: 0.995   # 99.5% uptime
          critical: 0.99   # 99% uptime
          window: 3600     # 1 hour

      anomaly_detection:
        baseline_window: 86400    # 24 hours
        detection_window: 300     # 5 minutes
        sensitivity: 2.0         # standard deviations
        metrics:
          - "response_time"
          - "error_rate"
          - "request_rate"
          - "cpu_usage"
    logging_patterns:
      level_distribution:
        INFO: 0.7
        DEBUG: 0.15
        WARNING: 0.1
        ERROR: 0.05

      message_templates:
        info:
          - "Request received: {method} {path}"
          - "Request completed successfully in {response_time}ms"
          - "Cache {hit_miss} for key: {cache_key}"
          - "Database query completed in {db_time}ms"
          - "Service {service} responded in {response_time}ms"

        debug:
          - "Processing request parameters: {params}"
          - "Cache lookup for key: {cache_key}"
          - "Executing database query: {query}"
          - "Service call details: {service_details}"
          - "Authentication attempt for user: {user_id}"

        warning:
          - "High response time detected: {response_time}ms"
          - "Cache miss rate exceeding threshold: {miss_rate}%"
          - "Database connection pool near capacity: {pool_usage}%"
          - "Rate limiting applied for client: {client_ip}"
          - "Service degradation detected in {service}"

        error:
          - "Request failed with status {status}: {error_message}"
          - "Database error: {db_error}"
          - "Service {service} unavailable: {error_details}"
          - "Authentication failed for user: {user_id}"
          - "Timeout occurred while calling {service}"

      error_categorization:
        client_errors:
          - "Invalid request parameters"
          - "Authentication failed"
          - "Authorization denied"
          - "Resource not found"
          - "Rate limit exceeded"

        server_errors:
          - "Internal server error"
          - "Service unavailable"
          - "Database connection failed"
          - "Cache system error"
          - "Memory allocation failed"

        integration_errors:
          - "External service timeout"
          - "API gateway error"
          - "Invalid service response"
          - "Circuit breaker opened"
          - "Message queue full"

      contextual_enrichment:
        request_context:
          - "client_ip"
          - "user_agent"
          - "referer"
          - "session_id"
          - "req_id"

        system_context:
          - "host_name"
          - "process_id"
          - "thread_id"
          - "memory_usage"
          - "cpu_usage"

        business_context:
          - "user_id"
          - "account_type"
          - "subscription_level"
          - "feature_flags"
          - "experiment_group"

      log_rotation:
        max_file_size: 100MB
        retention_period: 30  # days
        compression: true
        backup_count: 10
    security_patterns:
      authentication:
        success_rate: 0.95
        failure_patterns:
          invalid_credentials: 0.03
          expired_token: 0.01
          account_locked: 0.01
        token_lifecycle:
          access_token_ttl: 3600  # 1 hour
          refresh_token_ttl: 2592000  # 30 days
          rotation_enabled: true

      authorization:
        rbac_rules:
          admin:
            - "all"
          manager:
            - "read:*"
            - "write:products"
            - "write:orders"
          user:
            - "read:products"
            - "write:cart"
            - "read:orders"

        rate_limiting:
          default:
            requests_per_minute: 60
            burst: 10
          authenticated:
            requests_per_minute: 120
            burst: 20
          premium:
            requests_per_minute: 240
            burst: 40

      threat_patterns:
        sql_injection:
          probability: 0.001
          paths: ['/api/v1/users', '/api/v1/orders']
          patterns: ["'--", "1=1", "DROP TABLE"]

        xss_attempts:
          probability: 0.002
          paths: ['/api/v1/products', '/api/v1/reviews']
          patterns: ["<script>", "javascript:", "onerror="]

        brute_force:
          probability: 0.003
          endpoints: ['/login', '/reset-password']
          threshold: 5  # attempts
          window: 300   # seconds

        ddos_simulation:
          probability: 0.0005
          patterns:
            - "high_frequency_same_ip"
            - "distributed_high_frequency"
            - "slow_loris"

      compliance:
        data_masking:
          patterns:
            credit_card: "XXXX-XXXX-XXXX-{last4}"
            email: "{local}@{domain}"
            phone: "+X-XXX-XXX-{last4}"

        audit_logging:
          sensitive_operations:
            - "user.create"
            - "user.delete"
            - "payment.process"
            - "admin.login"
          retention_period: 90  # days

        encryption:
          algorithms:
            symmetric: "AES-256-GCM"
            asymmetric: "RSA-2048"
            hashing: "SHA-256"
          key_rotation:
            enabled: true
            interval: 90  # days
    performance_patterns:
      load_distribution:
        daily_pattern:
          peak_hours: [9, 10, 11, 14, 15, 16]  # Business hours
          off_peak_hours: [0, 1, 2, 3, 4, 5]   # Early morning
          peak_multiplier: 3.0
          off_peak_multiplier: 0.5

        weekly_pattern:
          weekdays: [1, 2, 3, 4, 5]  # Monday to Friday
          weekend: [6, 0]            # Saturday and Sunday
          weekend_multiplier: 0.7

        seasonal_pattern:
          high_seasons: ["11-15/12-31", "07-01/08-15"]  # Holiday and Summer
          low_seasons: ["01-15/02-28", "09-01/10-15"]
          high_season_multiplier: 2.0
          low_season_multiplier: 0.8

      resource_utilization:
        cpu_pattern:
          baseline: 30  # percentage
          peak_load: 75
          correlation:
            requests_per_second: 0.7
            concurrent_users: 0.8

        memory_pattern:
          baseline: 40  # percentage
          peak_load: 80
          growth_rate: 0.1  # per hour
          gc_trigger: 85

        connection_pools:
          database:
            min_idle: 10
            max_active: 100
            eviction_interval: 300
          cache:
            min_idle: 5
            max_active: 50
            eviction_policy: "LRU"

      response_time_degradation:
        factors:
          concurrent_users:
            threshold: 1000
            multiplier: 1.2
          database_load:
            threshold: 70  # percentage
            multiplier: 1.3
          cache_miss:
            threshold: 0.3  # 30% miss rate
            multiplier: 1.4

        recovery_patterns:
          auto_scale:
            trigger_cpu: 75
            cool_down: 300  # seconds
          cache_warm_up:
            duration: 600   # seconds
            priority_paths: ['/api/v1/products', '/api/v1/categories']

      optimization_triggers:
        cache_optimization:
          miss_rate_threshold: 0.25
          access_frequency_minimum: 100  # requests per hour
          data_volatility_maximum: 0.1   # 10% change rate

        query_optimization:
          execution_time_threshold: 500  # milliseconds
          frequency_minimum: 50          # executions per hour
          table_size_minimum: 10000      # rows

        connection_pool_optimization:
          wait_time_threshold: 100       # milliseconds
          idle_threshold: 0.2            # 20% idle connections
          busy_threshold: 0.8            # 80% busy connections
    failure_simulation:
      service_failures:
        random_failures:
          probability: 0.001
          services: ['auth-service', 'payment-service', 'inventory-service']
          duration:
            min: 30    # seconds
            max: 300   # seconds

        cascading_failures:
          trigger_services: ['auth-service']
          propagation_probability: 0.4
          affected_services: ['payment-service', 'inventory-service']
          recovery_time: 600  # seconds

        planned_outages:
          maintenance_windows: ["SAT 02:00-04:00", "WED 03:00-04:00"]
          services_per_window: 2
data_generation:
  user_profiles:
    distribution:
      new_users: 0.1      # 10% new users per day
      returning_users: 0.9    # 90% returning users
    attributes:
      user_types:
        regular: 0.7
        premium: 0.2
        trial: 0.1
      activity_levels:
        high: 0.2     # >100 requests/day
        medium: 0.5   # 20-100 requests/day
        low: 0.3      # <20 requests/day

  transaction_data:
    order_patterns:
      frequency:
        weekday_multiplier: 1.0
        weekend_multiplier: 1.3
        holiday_multiplier: 2.0
      value_distribution:
        mean: 100
        std_dev: 30
        min: 10
        max: 500

    product_patterns:
      categories:
        electronics: 0.3
        clothing: 0.25
        books: 0.15
        home: 0.2
        other: 0.1
      seasonal_effects:
        summer: ['clothing', 'electronics']
        winter: ['home', 'books']
        holiday: ['electronics', 'home']

  synthetic_errors:
    distribution:
      validation_errors: 0.4
      authentication_errors: 0.3
      system_errors: 0.2
      timeout_errors: 0.1

    patterns:
      time_correlation:
        peak_hours_multiplier: 1.5
        maintenance_window_multiplier: 3.0
      user_correlation:
        new_user_multiplier: 2.0
        mobile_user_multiplier: 1.3

  time_series:
    trends:
      long_term:
        growth_rate: 0.05  # 5% monthly growth
        seasonality: ['holiday', 'summer']
      short_term:
        daily_cycle: true
        weekly_cycle: true

    anomalies:
      frequency: 0.01     # 1% of data points
      types:
        spikes: 0.4
        dips: 0.3
        level_shifts: 0.2
        trend_changes: 0.1

      duration: 1800  # 30 minutes

    infrastructure_failures:
      network_issues:
        latency_spikes:
          probability: 0.005
          duration: 60    # seconds
          multiplier: 5.0
        packet_loss:
          probability: 0.002
          duration: 30
          loss_percentage: 0.1

      resource_exhaustion:
        memory_leaks:
          probability: 0.001
          growth_rate: 0.05  # per hour
          services: ['inventory-service']
        cpu_spikes:
          probability: 0.003
          duration: 300
          usage_percentage: 90

      disk_issues:
        probability: 0.0005
        types: ['io_latency', 'space_full']
        duration: 900  # 15 minutes

    dependency_failures:
      database:
        connection_drops:
          probability: 0.002
          duration: 45    # seconds
          affected_tables: ['orders', 'payments']
        replication_lag:
          probability: 0.001
          duration: 300
          lag_seconds: 30

      cache:
        eviction_storms:
          probability: 0.003
          duration: 120
          affected_percentage: 0.3
        connection_failures:
          probability: 0.002
          duration: 60
          recovery_strategy: "fallback_to_db"

      external_services:
        api_timeouts:
          probability: 0.004
          duration: 180
          services: ['payment-gateway', 'email-service']
        rate_limiting:
          probability: 0.005
          duration: 300
          threshold: 1000  # requests per minute

    recovery_patterns:
      circuit_breaker:
        failure_threshold: 5
        reset_timeout: 30
        half_open_requests: 3

      retry_strategy:
        max_attempts: 3
        backoff_multiplier: 2
        initial_delay: 1000  # milliseconds

      fallback_responses:
        cache_failures: "return_stale"
        service_failures: "degrade_functionality"
        database_failures: "read_replica"
output_formats:
  log_formats:
    web_server:
      format: >-
        {client_ip} - - {timestamp} \"{method} {path} {protocol}\"
        {status} {bytes} \"{referer}\" \"{user_agent}\"
        {response_time}ms {req_id}
      timestamp_format: "[%d/%b/%Y:%H:%M:%S.%f %z]"
      fields_mapping:
        client_ip: "string"
        timestamp: "timestamp"
        method: "string"
        path: "string"
        protocol: "string"
        status: "integer"
        bytes: "integer"
        referer: "string"
        user_agent: "string"
        response_time: "integer"
        req_id: "string"

    application_server:
      format: "{timestamp} {level} [{service}] {thread_id} {req_id} - {message}"
      timestamp_format: "%Y-%m-%d %H:%M:%S.%f"
      fields_mapping:
        timestamp: "timestamp"
        level: "string"
        service: "string"
        thread_id: "string"
        req_id: "string"
        message: "string"

  metrics_formats:
    prometheus:
      http_requests_total:
        type: "counter"
        labels: ["method", "path", "status", "service"]
      http_request_duration_seconds:
        type: "histogram"
        labels: ["method", "path", "service"]
        buckets: [0.1, 0.5, 1.0, 2.0, 5.0]

    statsd:
      patterns:
        - "service.{service}.requests.{status}"
        - "service.{service}.latency"
        - "cache.{operation}.{status}"
        - "db.{operation}.{table}.{status}"

  trace_formats:
    jaeger:
      service_name_key: "service"
      span_id_key: "span_id"
      trace_id_key: "req_id"
      timestamp_key: "timestamp"
      tags:
        - "http.method"
        - "http.url"
        - "http.status_code"
        - "error"
        - "db.statement"

    zipkin:
      local_endpoint: "service_name"
      span_name: "{method} {path}"
      timestamp_key: "timestamp"
      duration_key: "response_time"
      tags:
        http:
          - "method"
          - "path"
          - "status"
        db:
          - "operation"
          - "table"

  export_configurations:
    elasticsearch:
      index_pattern: "logs-{service}-%Y.%m.%d"
      document_type: "_doc"
      bulk_size: 1000
      retry_count: 3

    influxdb:
      database: "metrics"
      retention_policy: "30d"
      batch_size: 5000
      flush_interval: 10

    kafka:
      topics:
        logs: "application-logs"
        metrics: "application-metrics"
        traces: "application-traces"
      batch_size: 100
      compression: "snappy"
generation_settings:
  output_control:
    rate_limiting:
      base_rate: 100    # events per second
      burst_multiplier: 5
      dynamic_adjustment: true

    batch_processing:
      size: 1000        # events per batch
      interval: 1       # seconds
      max_delay: 5      # seconds

    backpressure:
      max_queue_size: 10000
      overflow_strategy: "drop_oldest"

  data_consistency:
    correlation:
      enforce_request_flow: true
      maintain_session_state: true
      preserve_causality: true

    validation:
      schema_validation: true
      relationship_checks: true
      business_rules: true

    state_management:
      session_tracking: true
      transaction_boundaries: true
      error_propagation: true

  performance_tuning:
    threading:
      worker_threads: 4
      io_threads: 2
      queue_size: 1000

    buffering:
      memory_buffer: 100MB
      flush_interval: 1000  # milliseconds
      max_batch_size: 5000

    optimization:
      compress_output: true
      dedup_events: true
      aggregate_metrics: true

  runtime_controls:
    graceful_shutdown:
      timeout: 30       # seconds
      flush_buffers: true
      save_state: true

    fault_tolerance:
      retry_attempts: 3
      backoff_initial: 1000  # milliseconds
      backoff_max: 30000     # milliseconds

    monitoring:
      health_check_interval: 60  # seconds
      stats_reporting_interval: 10
      alert_on_lag: true
execution_plan:
  initialization:
    startup_sequence:
      - "load_configuration"
      - "validate_settings"
      - "initialize_generators"
      - "establish_connections"
      - "warm_up_caches"

    prerequisites:
      memory_required: 1024  # MB
      disk_space: 10        # GB
      permissions: ["write_logs", "network_access"]

  scheduling:
    generation_phases:
      preparation:
        duration: 300  # seconds
        tasks: ["cache_warmup", "baseline_metrics"]

      main_execution:
        duration: "auto"  # runs until end_time
        checkpoints: 3600  # every hour

      cleanup:
        duration: 180  # seconds
        tasks: ["flush_buffers", "save_state"]

  monitoring:
    progress_tracking:
      log_progress: true
      interval: 60     # seconds
      metrics:
        - "events_generated"
        - "generation_rate"
        - "error_count"

    health_checks:
      enabled: true
      interval: 30     # seconds
      checks:
        - "memory_usage"
        - "disk_space"
        - "generation_lag"

  cleanup:
    shutdown_sequence:
      - "stop_generators"
      - "flush_buffers"
      - "save_state"
      - "close_connections"

    artifacts_handling:
      save_state: true
      compress_logs: true
      cleanup_temp: true
